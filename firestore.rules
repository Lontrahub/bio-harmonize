
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user making the request is an admin.
    // It checks for authentication, existence of the user profile, and the 'role' field.
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the `users` collection.
    match /users/{userId} {
      // Admins can get any user profile and list all users.
      allow get, list: if isAdmin();
      
      // Users can get their own profile.
      allow get: if request.auth.uid == userId;

      // Users can create their own profile upon sign-up.
      allow create: if request.auth.uid == userId;
      
      // Users can update their own profile (for shopping lists, etc.).
      allow update: if request.auth.uid == userId;
      
      // Disallow deleting user profiles from the client.
      allow delete: if false;
    }

    // Rules for the `userProgress` collection.
    match /userProgress/{progressId} {
      // Admins can read any user's progress documents.
      allow get, list: if isAdmin();
      
      // Users can read and write their own progress documents.
      // This rule works for get, list, create, update and delete because it checks
      // both the existing resource and the incoming request resource.
      // For list queries to work, the client MUST constrain the query by userId.
      // e.g., where("userId", "==", auth.uid)
      allow read, write: if request.auth.uid == resource.data.userId || 
                            request.auth.uid == request.resource.data.userId;
    }
    
    // Rules for static content.
    match /cleanseContent/{document=**} {
      // Any authenticated user can read documents from this collection.
      allow read: if request.auth != null;
    }
  }
}
